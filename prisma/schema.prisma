generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  fullName         String
  email            String             @unique
  password         String
  role             UserRole           @default(USER)
  verified         DateTime?
  provider         String?
  providerId       String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  phone            String?
  cart             Cart?
  favorites        Favorite[]
  orders           Order[]
  posts            Post[]
  verificationCode VerificationCode[]
}

model Category {
  id        Int          @id @default(autoincrement())
  name      CategoryName @unique
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  products  Product[]
}

model Product {
  id                    Int           @id @default(autoincrement())
  name                  String
  imageUrl              String?
  color                 String
  frostResistance       String?
  waterAbsorption       String?
  size                  String?
  weightKg              Float?
  quantityPerPallet     Int?
  palletsPerTruck       Int?
  totalPerTruck         Int?
  retailPriceRubWithVAT Float?
  city                  String?
  categoryId            Int
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  isOnSale              Boolean       @default(false)
  saleDescription       String?
  densityKgPerM3        String?
  description           String?
  manufacturer          String?
  strengthClass         String?
  favorites             Favorite[]
  category              Category      @relation(fields: [categoryId], references: [id])
  items                 ProductItem[]
}

model ProductItem {
  id        Int        @id @default(autoincrement())
  price     Int
  productId Int
  cartItems CartItem[]
  product   Product    @relation(fields: [productId], references: [id])
}

model Cart {
  id          Int        @id @default(autoincrement())
  userId      Int?       @unique
  token       String
  totalAmount Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User?      @relation(fields: [userId], references: [id])
  items       CartItem[]
}

model CartItem {
  id            Int         @id @default(autoincrement())
  cartId        Int
  productItemId Int
  quantity      Int         @default(1)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  cart          Cart        @relation(fields: [cartId], references: [id])
  productItem   ProductItem @relation(fields: [productItemId], references: [id])
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int?
  token       String
  totalAmount Int
  status      OrderStatus
  paymentId   String?
  items       Json
  fullName    String
  email       String
  phone       String
  address     String
  comment     String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User?       @relation(fields: [userId], references: [id])
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  userId    Int
  code      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, code])
}

model Story {
  id              Int         @id @default(autoincrement())
  previewImageUrl String
  createdAt       DateTime    @default(now())
  items           StoryItem[]
}

model StoryItem {
  id        Int      @id @default(autoincrement())
  storyId   Int
  sourceUrl String
  createdAt DateTime @default(now())
  story     Story    @relation(fields: [storyId], references: [id])
}

model Post {
  id          Int      @id @default(autoincrement())
  date        String
  title       String
  description String
  content     String
  createdAt   DateTime @default(now())
  authorId    Int
  author      User     @relation(fields: [authorId], references: [id])
}

model Favorite {
  id        Int     @id @default(autoincrement())
  userId    Int
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}

enum CategoryName {
  GAZOBETONNYE_BLOKI
  OBLITSOVOCHNYY_KIRPICH
  TROTUARNAYA_PLITKA
  SALES
}
